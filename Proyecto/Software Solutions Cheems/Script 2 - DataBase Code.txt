
CREATE SEQUENCE num_venta_sec 
INCREMENT 1
MINVALUE 00001
START 00001;

-- funcion de mensajes y triggers para insertar

CREATE OR REPLACE FUNCTION mensaje_insert_proveedor()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla proveedor';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_PROVEEDORES_INSERT
AFTER INSERT ON proveedor 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_proveedor();

CREATE OR REPLACE FUNCTION mensaje_insert_telefono()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla telefono';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_TELEFONO_PROVEEDORES_INSERT
AFTER INSERT ON telefono 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_telefono();

CREATE OR REPLACE FUNCTION mensaje_insert_inventario()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla inventario';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_INVENTARIO_INSERT
AFTER INSERT ON inventario 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_inventario();

CREATE OR REPLACE FUNCTION mensaje_insert_suministra()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla suministra';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_SUMINISTRA_INSERT
AFTER INSERT ON suministra
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_suministra();

CREATE OR REPLACE FUNCTION mensaje_insert_cliente()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla cliente';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_CLIENTES_INSERT
AFTER INSERT ON cliente
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_cliente();

CREATE OR REPLACE FUNCTION mensaje_insert_venta()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla venta';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_VENTA_INSERT
AFTER INSERT ON venta
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_venta();

CREATE OR REPLACE FUNCTION mensaje_insert_pertenece()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha insertado datos en la tabla pertenece';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_PERTENECE_INSERT
AFTER INSERT ON pertenece
FOR EACH ROW EXECUTE PROCEDURE
mensaje_insert_pertenece();

-- funcion de mensajes y triggers para actualizar

CREATE OR REPLACE FUNCTION mensaje_update_proveedor()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla proveedor';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_PROVEEDORES_UPDATE
AFTER UPDATE ON proveedor 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_proveedor();

CREATE OR REPLACE FUNCTION mensaje_update_telefono()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla telefono';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_TELEFONO_PROVEEDORES_UPDATE
AFTER UPDATE ON telefono 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_telefono();

CREATE OR REPLACE FUNCTION mensaje_update_inventario()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla inventario';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_INVENTARIO_UPDATE
AFTER UPDATE ON inventario 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_inventario();

CREATE OR REPLACE FUNCTION mensaje_update_suministra()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla suministra';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_SUMINISTRA_UPDATE
AFTER UPDATE ON suministra
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_suministra();

CREATE OR REPLACE FUNCTION mensaje_update_cliente()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla cliente';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_CLIENTES_UPDATE
AFTER UPDATE ON cliente
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_cliente();

CREATE OR REPLACE FUNCTION mensaje_update_venta()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla venta';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_VENTA_UPDATE 
AFTER UPDATE ON venta
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_venta();

CREATE OR REPLACE FUNCTION mensaje_update_pertenece()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha actualizado los datos de la tabla pertenece';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_PERTENECE_UPDATE
AFTER UPDATE ON pertenece
FOR EACH ROW EXECUTE PROCEDURE
mensaje_update_pertenece();


-- funcion de mensajes y triggers para eliminar

CREATE OR REPLACE FUNCTION mensaje_delete_proveedor()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha borrado algun datos de la tabla proveedor';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_PROVEEDORES_DELETE
AFTER UPDATE ON proveedor 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_proveedor();

CREATE OR REPLACE FUNCTION mensaje_delete_telefono()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha borrado algun datos de la tabla telefono';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_TELEFONO_PROVEEDORES_DELETE
AFTER UPDATE ON telefono 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_telefono();

CREATE OR REPLACE FUNCTION mensaje_delete_inventario()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha borrado algun datos de la tabla inventario';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_INVENTARIO_DELETE
AFTER UPDATE ON inventario 
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_inventario();

CREATE OR REPLACE FUNCTION mensaje_delete_suministra()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha borrado algun datos de la tabla suministra';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_SUMINISTRA_DELETE
AFTER UPDATE ON suministra
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_suministra();

CREATE OR REPLACE FUNCTION mensaje_delete_cliente()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha borrado algun datos de la tabla cliente';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_CLIENTES_DELETE
AFTER UPDATE ON cliente
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_cliente();

CREATE OR REPLACE FUNCTION mensaje_delete_venta()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE 'Se ha borrado algun datos de la tabla venta';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_VENTA_DELETE
AFTER UPDATE ON venta
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_venta();

CREATE OR REPLACE FUNCTION mensaje_delete_pertenece()
  RETURNS trigger AS
$BODY$
BEGIN
    RAISE NOTICE  'Se ha borrado algun datos de la tabla pertenece';
    RETURN NULL;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER AVISO_PERTENECE_DELETE
AFTER UPDATE ON pertenece
FOR EACH ROW EXECUTE PROCEDURE
mensaje_delete_pertenece();

-- TRIGGERS PARA ELIMINAR INSERTAR O ACTUALIZAR AUDITORIAS 

CREATE TABLE auditoria_proveedor(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	razon_social varchar(100),
	nombre varchar(100) not null,
	calle varchar(60) not null,
	numero int not null,
	cp int not null,
	colonia varchar(60) not null,
	estado varchar(60) not null
	);
	

CREATE OR REPLACE FUNCTION process_proveedor() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_proveedor SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_proveedor SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_proveedor SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER PROVEEDOR_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON proveedor
	FOR EACH ROW EXECUTE FUNCTION process_proveedor();


CREATE TABLE auditoria_telefono(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	telefono bigint,
	razon_social varchar(100) not null
	);

CREATE OR REPLACE FUNCTION process_telefono() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_telefono SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_telefono SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_telefono SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;	

CREATE TRIGGER TELEFONO_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON telefono
	FOR EACH ROW EXECUTE FUNCTION process_telefono();

CREATE TABLE auditoria_inventario(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	codigo_barras varchar(50),
	cantidad_stock int not null,
	marca varchar(50) not null,
	precio float not null,
	descripcion varchar(100) not null
);	

CREATE OR REPLACE FUNCTION process_inventario() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_inventario SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_inventario SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_inventario SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;	


CREATE TRIGGER INVENTARIO_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON inventario
	FOR EACH ROW EXECUTE FUNCTION process_inventario();

CREATE TABLE auditoria_suministra(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	razon_social varchar(100),
	codigo_barras varchar(50),
	fecha_compra date not null,
	precio_adquirido float not null
	);

CREATE OR REPLACE FUNCTION process_suministra() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_suministra SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_suministra SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_suministra SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;	

CREATE TRIGGER SUMINISTRA_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON suministra
	FOR EACH ROW EXECUTE FUNCTION process_suministra();


CREATE TABLE auditoria_cliente(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	id_cliente varchar(50),
	nombre varchar (100) not null,
	rfc varchar(30) not null,
	calle varchar(60) not null,
	numero int not null,
	cp int not null,
	colonia varchar(60) not null,
	estado varchar(60) not null,
	email varchar (60) not null
	);


CREATE OR REPLACE FUNCTION process_cliente() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_cliente SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_cliente SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_cliente SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;	

CREATE TRIGGER CLIENTE_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON cliente
	FOR EACH ROW EXECUTE FUNCTION process_cliente();


CREATE TABLE auditoria_venta(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	num_venta varchar(20),
	fecha_venta date not null,
	cantidad_total float not null,
	id_cliente varchar (50)
	);

CREATE OR REPLACE FUNCTION process_venta() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_venta SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_venta SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_venta SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;	

CREATE TRIGGER VENTA_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON venta
	FOR EACH ROW EXECUTE FUNCTION process_venta();

CREATE TABLE auditoria_pertenece(
	operacion char(1) not null,
	fecha_operacion timestamp not null,
	usuario	text not null,
	codigo_barras varchar (50),
	num_venta varchar (20) not null,
	cantidad_articulo int not null,
	precio_total_articulo float not null
	);

CREATE OR REPLACE FUNCTION process_pertenece() RETURNS TRIGGER AS $$
	BEGIN
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO auditoria_pertenece SELECT 'D', now(), user, OLD.*;
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO auditoria_pertenece SELECT 'U', now(), user, OLD.*;
		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO auditoria_pertenece SELECT 'I', now(), user, NEW.*;
		END IF;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;	

CREATE TRIGGER PERTENECE_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON pertenece
	FOR EACH ROW EXECUTE FUNCTION process_pertenece();


CREATE OR REPLACE FUNCTION id_VENT() RETURNS VARCHAR AS $$
	DECLARE clave varchar(8);
	BEGIN
	clave:=CONCAT('VENT-',CAST((SELECT nextval('num_venta_sec')) AS VARCHAR));
	RETURN clave;
	END;
$$ LANGUAGE plpgsql;